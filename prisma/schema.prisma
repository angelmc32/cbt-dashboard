// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum STATUS {
    DEPLOYED
    DRAFT
    ERROR
    PROCESSING
}

model SocialMediaUrl {
    id                  String          @id @default(cuid())
    platformName        String          @unique
    url                 String
    community           Community       @relation(fields: [communityId], references: [id], onDelete: Cascade)
    communityId         String

    @@index([communityId])
}

model Community {
    id                  String          @id @default(cuid())
    address             String?         @unique
    communityContract   CommunityContract?
    communityAddress    String?
    deployedByAddress   String
    name                String
    symbol              String
    description         String
    imageUri            String
    urlSocialMedias     SocialMediaUrl[]
    urlWebsite          String?
    users               UsersOnCommunities[]
    members             String[]
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt

    @@index([address, deployedByAddress, communityAddress, name])
}

model CommunityContract {
    id                  String          @id @default(cuid())
    address             String?         @unique
    deployedByAddress   String
    name                String
    symbol              String
    baseUri             String
    community           Community       @relation(fields: [communityId], references: [id])
    communityId         String          @unique
    owners              String[]
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt

    @@index([address, deployedByAddress, communityId])
}

model UsersOnCommunities {
  user                  User            @relation(fields: [userId], references: [id])
  userId                String
  community             Community       @relation(fields: [communityId], references: [id])
  communityId           String
  assignedAt            DateTime        @default(now())
  assignedBy            String

  @@id([userId, communityId])
}

model NftContract {
    id                  String          @id @default(cuid())
    address             String?         @unique
    deployedByAddress   String
    name                String
    symbol              String
    baseUri             String
    status              STATUS          @default(DRAFT)
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt

    @@index([address, deployedByAddress])
}

model NftMetadata {
    id                  String          @id @default(cuid())
    name                String
    description         String
    imageUrl            String
    externalUrl         String
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
}

// Necessary for Next auth
model Account {
    id                  String          @id @default(cuid())
    userId              String
    type                String
    provider            String
    providerAccountId   String
    refresh_token       String?         // @db.Text
    access_token        String?         // @db.Text
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?         // @db.Text
    session_state       String?
    user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                  String          @id @default(cuid())
    address             String?         @unique
    name                String?
    email               String?         @unique
    emailVerified       DateTime?
    urlProfileImg       String?
    accounts            Account[]
    communities         UsersOnCommunities[]

    @@index([address, email, name])
}
